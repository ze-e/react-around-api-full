{"ast":null,"code":"//import {token, groupId} from './config';\nimport { baseURL } from './config';\n\nclass Api {\n  constructor({\n    baseURL\n  }) {\n    this.baseURL = baseURL;\n  }\n\n  setToken(token) {\n    this.token = token;\n  }\n  /* API FUNCTIONS */\n\n\n  getUser() {\n    return fetch(`${this.baseURL}/users/me`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Error: ${res.statusText}`);\n    });\n  }\n\n  getCards() {\n    return fetch(`${this.baseURL}/cards`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Error: ${res.statusText}`);\n    });\n  }\n\n  editProfile(name, about) {\n    return fetch(`${this.baseURL}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this.token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Error: ${res.statusText}`);\n    });\n  }\n\n  editAvatar(link) {\n    return fetch(`${this.baseURL}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        authorization: this.token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`editAvatar Error: ${res.statusText}`);\n    });\n  }\n\n  addCard(name, link) {\n    return fetch(`${this.baseURL}/cards`, {\n      method: \"POST\",\n      headers: {\n        authorization: this.token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Error: ${res.statusText}`);\n    });\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this.baseURL}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this.token,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Error: ${res.statusText}`);\n    });\n  }\n\n  changeLikeCardStatus(cardId, liked) {\n    return liked ? this.deleteLike(cardId) : this.addLike(cardId);\n  }\n\n  addLike(cardId) {\n    return fetch(`${this.baseURL}/cards/likes/${cardId}`, {\n      method: \"PUT\",\n      headers: {\n        authorization: this.token,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`editLikes Error: ${res.statusText}`);\n    });\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this.baseURL}/cards/likes/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this.token,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`editLikes Error: ${res.statusText}`);\n    });\n  }\n\n}\n\nconst api = new Api({\n  baseURL: baseURL\n});\nexport { api };","map":{"version":3,"sources":["C:/Users/ZEE/Yandex/react-around-api-full/frontend/src/utils/api.js"],"names":["baseURL","Api","constructor","setToken","token","getUser","fetch","headers","authorization","then","res","ok","json","Promise","reject","statusText","getCards","editProfile","name","about","method","body","JSON","stringify","editAvatar","link","avatar","addCard","deleteCard","cardId","changeLikeCardStatus","liked","deleteLike","addLike","api"],"mappings":"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","sourcesContent":["//import {token, groupId} from './config';\r\nimport {baseURL} from './config';\r\nclass Api{\r\n  constructor({baseURL}){\r\n    this.baseURL = baseURL;\r\n  }\r\n\r\n  setToken(token){\r\n    this.token = token;\r\n  }\r\n  \r\n  /* API FUNCTIONS */\r\n  getUser(){\r\n    return fetch(`${this.baseURL}/users/me`,{\r\n      headers: {\r\n        authorization: this.token\r\n      }\r\n    })\r\n    .then((res) => {\r\n      if(res.ok){\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Error: ${res.statusText}`);\r\n    })\r\n  }\r\n  \r\n  getCards(){\r\n    return fetch(`${this.baseURL}/cards`,{\r\n      headers: {\r\n        authorization: this.token\r\n      }\r\n    })\r\n    .then((res) => {\r\n      if(res.ok){\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Error: ${res.statusText}`);\r\n    })\r\n  }\r\n\r\n  editProfile(name, about){\r\n    return fetch(`${this.baseURL}/users/me`,{\r\n      method: \"PATCH\",\r\n      headers: {\r\n        authorization: this.token,\r\n        \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: name,\r\n          about: about\r\n        })\r\n    })\r\n    .then((res) => {\r\n      if(res.ok){\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Error: ${res.statusText}`);\r\n    })\r\n  }\r\n\r\n  editAvatar(link){\r\n    return fetch(`${this.baseURL}/users/me/avatar`,{\r\n      method: \"PATCH\",\r\n      headers: {\r\n        authorization: this.token,\r\n        \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          avatar: link\r\n        })\r\n    })\r\n    .then((res) => {\r\n      if(res.ok){\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`editAvatar Error: ${res.statusText}`);\r\n    })\r\n  }\r\n\r\n  addCard(name, link){\r\n    return fetch(`${this.baseURL}/cards`,{\r\n      method: \"POST\",\r\n      headers: {\r\n        authorization: this.token,\r\n        \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          name: name,\r\n          link: link\r\n        })\r\n    })\r\n    .then((res) => {\r\n      if(res.ok){\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Error: ${res.statusText}`);\r\n    })\r\n  }\r\n\r\n  deleteCard(cardId){\r\n    return fetch(`${this.baseURL}/cards/${cardId}`,{\r\n      method: \"DELETE\",\r\n      headers: {\r\n        authorization: this.token,\r\n        \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n    .then((res) => {\r\n      if(res.ok){\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`Error: ${res.statusText}`);\r\n    })\r\n  }\r\n\r\n  changeLikeCardStatus(cardId, liked){\r\n    return liked ? this.deleteLike(cardId) : this.addLike(cardId);\r\n  }\r\n\r\n  addLike(cardId){\r\n    return fetch(`${this.baseURL}/cards/likes/${cardId}`,{\r\n      method: \"PUT\",\r\n      headers: {\r\n        authorization: this.token,\r\n        \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n    .then((res) => {\r\n      if(res.ok){\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`editLikes Error: ${res.statusText}`);\r\n    })\r\n\r\n  }\r\n\r\n  deleteLike(cardId){\r\n    return fetch(`${this.baseURL}/cards/likes/${cardId}`,{\r\n      method: \"DELETE\",\r\n      headers: {\r\n        authorization: this.token,\r\n        \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n    .then((res) => {\r\n      if(res.ok){\r\n        return res.json();\r\n      }\r\n      return Promise.reject(`editLikes Error: ${res.statusText}`);\r\n    })\r\n  }\r\n}\r\n\r\nconst api = new Api({\r\n  baseURL : baseURL, \r\n});\r\n\r\nexport {api};"]},"metadata":{},"sourceType":"module"}